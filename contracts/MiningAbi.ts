/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Miner {
  export type RateStruct = { instance: string; value: BigNumberish };

  export type RateStructOutput = [string, BigNumber] & {
    instance: string;
    value: BigNumber;
  };

  export type RewardExtDataStruct = {
    relayer: string;
    encryptedAccount: BytesLike;
  };

  export type RewardExtDataStructOutput = [string, string] & {
    relayer: string;
    encryptedAccount: string;
  };

  export type AccountUpdateStruct = {
    inputRoot: BytesLike;
    inputNullifierHash: BytesLike;
    outputRoot: BytesLike;
    outputPathIndices: BigNumberish;
    outputCommitment: BytesLike;
  };

  export type AccountUpdateStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    inputRoot: string;
    inputNullifierHash: string;
    outputRoot: string;
    outputPathIndices: BigNumber;
    outputCommitment: string;
  };

  export type RewardArgsStruct = {
    rate: BigNumberish;
    fee: BigNumberish;
    instance: string;
    rewardNullifier: BytesLike;
    extDataHash: BytesLike;
    depositRoot: BytesLike;
    withdrawalRoot: BytesLike;
    extData: Miner.RewardExtDataStruct;
    account: Miner.AccountUpdateStruct;
  };

  export type RewardArgsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    Miner.RewardExtDataStructOutput,
    Miner.AccountUpdateStructOutput
  ] & {
    rate: BigNumber;
    fee: BigNumber;
    instance: string;
    rewardNullifier: string;
    extDataHash: string;
    depositRoot: string;
    withdrawalRoot: string;
    extData: Miner.RewardExtDataStructOutput;
    account: Miner.AccountUpdateStructOutput;
  };

  export type TreeUpdateArgsStruct = {
    oldRoot: BytesLike;
    newRoot: BytesLike;
    leaf: BytesLike;
    pathIndices: BigNumberish;
  };

  export type TreeUpdateArgsStructOutput = [
    string,
    string,
    string,
    BigNumber
  ] & {
    oldRoot: string;
    newRoot: string;
    leaf: string;
    pathIndices: BigNumber;
  };

  export type WithdrawExtDataStruct = {
    fee: BigNumberish;
    recipient: string;
    relayer: string;
    encryptedAccount: BytesLike;
  };

  export type WithdrawExtDataStructOutput = [
    BigNumber,
    string,
    string,
    string
  ] & {
    fee: BigNumber;
    recipient: string;
    relayer: string;
    encryptedAccount: string;
  };

  export type WithdrawArgsStruct = {
    amount: BigNumberish;
    extDataHash: BytesLike;
    extData: Miner.WithdrawExtDataStruct;
    account: Miner.AccountUpdateStruct;
  };

  export type WithdrawArgsStructOutput = [
    BigNumber,
    string,
    Miner.WithdrawExtDataStructOutput,
    Miner.AccountUpdateStructOutput
  ] & {
    amount: BigNumber;
    extDataHash: string;
    extData: Miner.WithdrawExtDataStructOutput;
    account: Miner.AccountUpdateStructOutput;
  };

  export type TreeLeafStruct = {
    instance: string;
    hash: BytesLike;
    block: BigNumberish;
    index: BigNumberish;
  };

  export type TreeLeafStructOutput = [string, string, BigNumber, BigNumber] & {
    instance: string;
    hash: string;
    block: BigNumber;
    index: BigNumber;
  };
}

export interface MiningAbiInterface extends utils.Interface {
  functions: {
    "ACCOUNT_ROOT_HISTORY_SIZE()": FunctionFragment;
    "accountCount()": FunctionFragment;
    "accountNullifiers(bytes32)": FunctionFragment;
    "accountRoots(uint256)": FunctionFragment;
    "depositRoot()": FunctionFragment;
    "governance()": FunctionFragment;
    "owner()": FunctionFragment;
    "previousDepositRoot()": FunctionFragment;
    "previousWithdrawalRoot()": FunctionFragment;
    "rates(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolve(bytes32)": FunctionFragment;
    "rewardNullifiers(bytes32)": FunctionFragment;
    "rewardSwap()": FunctionFragment;
    "rewardVerifier()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treeUpdateVerifier()": FunctionFragment;
    "withdrawVerifier()": FunctionFragment;
    "withdrawalRoot()": FunctionFragment;
    "batchReward(bytes[])": FunctionFragment;
    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))": FunctionFragment;
    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))": FunctionFragment;
    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))": FunctionFragment;
    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))": FunctionFragment;
    "updateRoots(bytes32,bytes32,(address,bytes32,uint256,uint256)[],bytes32,bytes32,(address,bytes32,uint256,uint256)[])": FunctionFragment;
    "setRates((address,uint256)[])": FunctionFragment;
    "setPoolWeight(uint256)": FunctionFragment;
    "isKnownAccountRoot(bytes32,uint256)": FunctionFragment;
    "getLastAccountRoot()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCOUNT_ROOT_HISTORY_SIZE"
      | "accountCount"
      | "accountNullifiers"
      | "accountRoots"
      | "depositRoot"
      | "governance"
      | "owner"
      | "previousDepositRoot"
      | "previousWithdrawalRoot"
      | "rates"
      | "renounceOwnership"
      | "resolve"
      | "rewardNullifiers"
      | "rewardSwap"
      | "rewardVerifier"
      | "transferOwnership"
      | "treeUpdateVerifier"
      | "withdrawVerifier"
      | "withdrawalRoot"
      | "batchReward"
      | "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"
      | "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"
      | "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"
      | "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"
      | "updateRoots"
      | "setRates"
      | "setPoolWeight"
      | "isKnownAccountRoot"
      | "getLastAccountRoot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCOUNT_ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountNullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accountRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previousDepositRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousWithdrawalRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolve", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "rewardNullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treeUpdateVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchReward",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))",
    values: [
      BytesLike,
      Miner.RewardArgsStruct,
      BytesLike,
      Miner.TreeUpdateArgsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))",
    values: [BytesLike, Miner.RewardArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))",
    values: [BytesLike, Miner.WithdrawArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))",
    values: [
      BytesLike,
      Miner.WithdrawArgsStruct,
      BytesLike,
      Miner.TreeUpdateArgsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoots",
    values: [
      BytesLike,
      BytesLike,
      Miner.TreeLeafStruct[],
      BytesLike,
      BytesLike,
      Miner.TreeLeafStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRates",
    values: [Miner.RateStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownAccountRoot",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastAccountRoot",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCOUNT_ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountNullifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousDepositRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousWithdrawalRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardNullifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treeUpdateVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownAccountRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastAccountRoot",
    data: BytesLike
  ): Result;

  events: {
    "DepositData(address,bytes32,uint256,uint256)": EventFragment;
    "NewAccount(bytes32,bytes32,bytes,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RateChanged(address,uint256)": EventFragment;
    "WithdrawalData(address,bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalData"): EventFragment;
}

export interface DepositDataEventObject {
  instance: string;
  hash: string;
  block: BigNumber;
  index: BigNumber;
}
export type DepositDataEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositDataEventObject
>;

export type DepositDataEventFilter = TypedEventFilter<DepositDataEvent>;

export interface NewAccountEventObject {
  commitment: string;
  nullifier: string;
  encryptedAccount: string;
  index: BigNumber;
}
export type NewAccountEvent = TypedEvent<
  [string, string, string, BigNumber],
  NewAccountEventObject
>;

export type NewAccountEventFilter = TypedEventFilter<NewAccountEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RateChangedEventObject {
  instance: string;
  value: BigNumber;
}
export type RateChangedEvent = TypedEvent<
  [string, BigNumber],
  RateChangedEventObject
>;

export type RateChangedEventFilter = TypedEventFilter<RateChangedEvent>;

export interface WithdrawalDataEventObject {
  instance: string;
  hash: string;
  block: BigNumber;
  index: BigNumber;
}
export type WithdrawalDataEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawalDataEventObject
>;

export type WithdrawalDataEventFilter = TypedEventFilter<WithdrawalDataEvent>;

export interface MiningAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MiningAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCOUNT_ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountNullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    accountRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    depositRoot(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previousDepositRoot(overrides?: CallOverrides): Promise<[string]>;

    previousWithdrawalRoot(overrides?: CallOverrides): Promise<[string]>;

    rates(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    rewardNullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardSwap(overrides?: CallOverrides): Promise<[string]>;

    rewardVerifier(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treeUpdateVerifier(overrides?: CallOverrides): Promise<[string]>;

    withdrawVerifier(overrides?: CallOverrides): Promise<[string]>;

    withdrawalRoot(overrides?: CallOverrides): Promise<[string]>;

    batchReward(
      _rewardArgs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
      _proof: BytesLike,
      _args: Miner.RewardArgsStruct,
      _treeUpdateProof: BytesLike,
      _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
      _proof: BytesLike,
      _args: Miner.RewardArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
      _proof: BytesLike,
      _args: Miner.WithdrawArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
      _proof: BytesLike,
      _args: Miner.WithdrawArgsStruct,
      _treeUpdateProof: BytesLike,
      _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRoots(
      _currentDepositRoot: BytesLike,
      _newDepositRoot: BytesLike,
      _deposits: Miner.TreeLeafStruct[],
      _currentWithdrawalRoot: BytesLike,
      _newWithdrawalRoot: BytesLike,
      _withdrawals: Miner.TreeLeafStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRates(
      _rates: Miner.RateStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolWeight(
      newWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isKnownAccountRoot(
      _root: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLastAccountRoot(overrides?: CallOverrides): Promise<[string]>;
  };

  ACCOUNT_ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  accountCount(overrides?: CallOverrides): Promise<BigNumber>;

  accountNullifiers(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  accountRoots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  depositRoot(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  previousDepositRoot(overrides?: CallOverrides): Promise<string>;

  previousWithdrawalRoot(overrides?: CallOverrides): Promise<string>;

  rates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolve(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  rewardNullifiers(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewardSwap(overrides?: CallOverrides): Promise<string>;

  rewardVerifier(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treeUpdateVerifier(overrides?: CallOverrides): Promise<string>;

  withdrawVerifier(overrides?: CallOverrides): Promise<string>;

  withdrawalRoot(overrides?: CallOverrides): Promise<string>;

  batchReward(
    _rewardArgs: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
    _proof: BytesLike,
    _args: Miner.RewardArgsStruct,
    _treeUpdateProof: BytesLike,
    _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
    _proof: BytesLike,
    _args: Miner.RewardArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
    _proof: BytesLike,
    _args: Miner.WithdrawArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
    _proof: BytesLike,
    _args: Miner.WithdrawArgsStruct,
    _treeUpdateProof: BytesLike,
    _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRoots(
    _currentDepositRoot: BytesLike,
    _newDepositRoot: BytesLike,
    _deposits: Miner.TreeLeafStruct[],
    _currentWithdrawalRoot: BytesLike,
    _newWithdrawalRoot: BytesLike,
    _withdrawals: Miner.TreeLeafStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRates(
    _rates: Miner.RateStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolWeight(
    newWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isKnownAccountRoot(
    _root: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLastAccountRoot(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ACCOUNT_ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    accountCount(overrides?: CallOverrides): Promise<BigNumber>;

    accountNullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    accountRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    depositRoot(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    previousDepositRoot(overrides?: CallOverrides): Promise<string>;

    previousWithdrawalRoot(overrides?: CallOverrides): Promise<string>;

    rates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    rewardNullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardSwap(overrides?: CallOverrides): Promise<string>;

    rewardVerifier(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treeUpdateVerifier(overrides?: CallOverrides): Promise<string>;

    withdrawVerifier(overrides?: CallOverrides): Promise<string>;

    withdrawalRoot(overrides?: CallOverrides): Promise<string>;

    batchReward(
      _rewardArgs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
      _proof: BytesLike,
      _args: Miner.RewardArgsStruct,
      _treeUpdateProof: BytesLike,
      _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
      _proof: BytesLike,
      _args: Miner.RewardArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
      _proof: BytesLike,
      _args: Miner.WithdrawArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
      _proof: BytesLike,
      _args: Miner.WithdrawArgsStruct,
      _treeUpdateProof: BytesLike,
      _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRoots(
      _currentDepositRoot: BytesLike,
      _newDepositRoot: BytesLike,
      _deposits: Miner.TreeLeafStruct[],
      _currentWithdrawalRoot: BytesLike,
      _newWithdrawalRoot: BytesLike,
      _withdrawals: Miner.TreeLeafStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRates(
      _rates: Miner.RateStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolWeight(
      newWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isKnownAccountRoot(
      _root: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLastAccountRoot(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DepositData(address,bytes32,uint256,uint256)"(
      instance?: null,
      hash?: BytesLike | null,
      block?: null,
      index?: null
    ): DepositDataEventFilter;
    DepositData(
      instance?: null,
      hash?: BytesLike | null,
      block?: null,
      index?: null
    ): DepositDataEventFilter;

    "NewAccount(bytes32,bytes32,bytes,uint256)"(
      commitment?: null,
      nullifier?: null,
      encryptedAccount?: null,
      index?: null
    ): NewAccountEventFilter;
    NewAccount(
      commitment?: null,
      nullifier?: null,
      encryptedAccount?: null,
      index?: null
    ): NewAccountEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RateChanged(address,uint256)"(
      instance?: null,
      value?: null
    ): RateChangedEventFilter;
    RateChanged(instance?: null, value?: null): RateChangedEventFilter;

    "WithdrawalData(address,bytes32,uint256,uint256)"(
      instance?: null,
      hash?: BytesLike | null,
      block?: null,
      index?: null
    ): WithdrawalDataEventFilter;
    WithdrawalData(
      instance?: null,
      hash?: BytesLike | null,
      block?: null,
      index?: null
    ): WithdrawalDataEventFilter;
  };

  estimateGas: {
    ACCOUNT_ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    accountCount(overrides?: CallOverrides): Promise<BigNumber>;

    accountNullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositRoot(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previousDepositRoot(overrides?: CallOverrides): Promise<BigNumber>;

    previousWithdrawalRoot(overrides?: CallOverrides): Promise<BigNumber>;

    rates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rewardNullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSwap(overrides?: CallOverrides): Promise<BigNumber>;

    rewardVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treeUpdateVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalRoot(overrides?: CallOverrides): Promise<BigNumber>;

    batchReward(
      _rewardArgs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
      _proof: BytesLike,
      _args: Miner.RewardArgsStruct,
      _treeUpdateProof: BytesLike,
      _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
      _proof: BytesLike,
      _args: Miner.RewardArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
      _proof: BytesLike,
      _args: Miner.WithdrawArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
      _proof: BytesLike,
      _args: Miner.WithdrawArgsStruct,
      _treeUpdateProof: BytesLike,
      _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRoots(
      _currentDepositRoot: BytesLike,
      _newDepositRoot: BytesLike,
      _deposits: Miner.TreeLeafStruct[],
      _currentWithdrawalRoot: BytesLike,
      _newWithdrawalRoot: BytesLike,
      _withdrawals: Miner.TreeLeafStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRates(
      _rates: Miner.RateStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolWeight(
      newWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isKnownAccountRoot(
      _root: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastAccountRoot(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCOUNT_ROOT_HISTORY_SIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountNullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousDepositRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousWithdrawalRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardNullifiers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treeUpdateVerifier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchReward(
      _rewardArgs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
      _proof: BytesLike,
      _args: Miner.RewardArgsStruct,
      _treeUpdateProof: BytesLike,
      _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "reward(bytes,(uint256,uint256,address,bytes32,bytes32,bytes32,bytes32,(address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
      _proof: BytesLike,
      _args: Miner.RewardArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)))"(
      _proof: BytesLike,
      _args: Miner.WithdrawArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes,(uint256,bytes32,(uint256,address,address,bytes),(bytes32,bytes32,bytes32,uint256,bytes32)),bytes,(bytes32,bytes32,bytes32,uint256))"(
      _proof: BytesLike,
      _args: Miner.WithdrawArgsStruct,
      _treeUpdateProof: BytesLike,
      _treeUpdateArgs: Miner.TreeUpdateArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRoots(
      _currentDepositRoot: BytesLike,
      _newDepositRoot: BytesLike,
      _deposits: Miner.TreeLeafStruct[],
      _currentWithdrawalRoot: BytesLike,
      _newWithdrawalRoot: BytesLike,
      _withdrawals: Miner.TreeLeafStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRates(
      _rates: Miner.RateStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolWeight(
      newWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isKnownAccountRoot(
      _root: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastAccountRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
