/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace GovernanceAggregator {
  export type ProposalStruct = {
    proposer: string;
    target: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    executed: boolean;
    extended: boolean;
    state: BigNumberish;
  };

  export type ProposalStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    number
  ] & {
    proposer: string;
    target: string;
    startTime: BigNumber;
    endTime: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    executed: boolean;
    extended: boolean;
    state: number;
  };
}

export interface AggregatorAbiInterface extends utils.Interface {
  functions: {
    "bulkResolve(bytes32[])": FunctionFragment;
    "getAllProposals(address)": FunctionFragment;
    "getGovernanceBalances(address,address[])": FunctionFragment;
    "getPricesInETH(address[],uint256[])": FunctionFragment;
    "getUserData(address,address)": FunctionFragment;
    "minerRates(address,address[])": FunctionFragment;
    "resolve(bytes32)": FunctionFragment;
    "swapState(address)": FunctionFragment;
    "miningData(address,address[],address)": FunctionFragment;
    "marketData(address[],uint256[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bulkResolve"
      | "getAllProposals"
      | "getGovernanceBalances"
      | "getPricesInETH"
      | "getUserData"
      | "minerRates"
      | "resolve"
      | "swapState"
      | "miningData"
      | "marketData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bulkResolve",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProposals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernanceBalances",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPricesInETH",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minerRates",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "resolve", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "swapState", values: [string]): string;
  encodeFunctionData(
    functionFragment: "miningData",
    values: [string, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketData",
    values: [string[], BigNumberish[], string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bulkResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernanceBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricesInETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minerRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "miningData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketData", data: BytesLike): Result;

  events: {};
}

export interface AggregatorAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AggregatorAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bulkResolve(
      domains: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllProposals(
      governance: string,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceAggregator.ProposalStructOutput[]] & {
        proposals: GovernanceAggregator.ProposalStructOutput[];
      }
    >;

    getGovernanceBalances(
      governance: string,
      accs: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getPricesInETH(
      fromTokens: string[],
      oneUnitAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { prices: BigNumber[] }>;

    getUserData(
      governance: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        balance: BigNumber;
        latestProposalId: BigNumber;
        latestProposalIdState: BigNumber;
        timelock: BigNumber;
        delegatee: string;
      }
    >;

    minerRates(
      miner: string,
      instances: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _rates: BigNumber[] }>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    swapState(
      swap: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; poolWeight: BigNumber }
    >;

    miningData(
      miner: string,
      instances: string[],
      swap: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, BigNumber] & {
        _rates: BigNumber[];
        balance: BigNumber;
        poolWeight: BigNumber;
      }
    >;

    marketData(
      fromTokens: string[],
      oneUnitAmounts: BigNumberish[],
      swap: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber] & { prices: BigNumber[]; balance: BigNumber }
    >;
  };

  bulkResolve(
    domains: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllProposals(
    governance: string,
    overrides?: CallOverrides
  ): Promise<GovernanceAggregator.ProposalStructOutput[]>;

  getGovernanceBalances(
    governance: string,
    accs: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPricesInETH(
    fromTokens: string[],
    oneUnitAmounts: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserData(
    governance: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      balance: BigNumber;
      latestProposalId: BigNumber;
      latestProposalIdState: BigNumber;
      timelock: BigNumber;
      delegatee: string;
    }
  >;

  minerRates(
    miner: string,
    instances: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  resolve(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  swapState(
    swap: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { balance: BigNumber; poolWeight: BigNumber }
  >;

  miningData(
    miner: string,
    instances: string[],
    swap: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber, BigNumber] & {
      _rates: BigNumber[];
      balance: BigNumber;
      poolWeight: BigNumber;
    }
  >;

  marketData(
    fromTokens: string[],
    oneUnitAmounts: BigNumberish[],
    swap: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber] & { prices: BigNumber[]; balance: BigNumber }
  >;

  callStatic: {
    bulkResolve(
      domains: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAllProposals(
      governance: string,
      overrides?: CallOverrides
    ): Promise<GovernanceAggregator.ProposalStructOutput[]>;

    getGovernanceBalances(
      governance: string,
      accs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPricesInETH(
      fromTokens: string[],
      oneUnitAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserData(
      governance: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        balance: BigNumber;
        latestProposalId: BigNumber;
        latestProposalIdState: BigNumber;
        timelock: BigNumber;
        delegatee: string;
      }
    >;

    minerRates(
      miner: string,
      instances: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    swapState(
      swap: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; poolWeight: BigNumber }
    >;

    miningData(
      miner: string,
      instances: string[],
      swap: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, BigNumber] & {
        _rates: BigNumber[];
        balance: BigNumber;
        poolWeight: BigNumber;
      }
    >;

    marketData(
      fromTokens: string[],
      oneUnitAmounts: BigNumberish[],
      swap: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber] & { prices: BigNumber[]; balance: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    bulkResolve(
      domains: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllProposals(
      governance: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernanceBalances(
      governance: string,
      accs: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPricesInETH(
      fromTokens: string[],
      oneUnitAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserData(
      governance: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minerRates(
      miner: string,
      instances: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolve(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    swapState(swap: string, overrides?: CallOverrides): Promise<BigNumber>;

    miningData(
      miner: string,
      instances: string[],
      swap: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketData(
      fromTokens: string[],
      oneUnitAmounts: BigNumberish[],
      swap: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bulkResolve(
      domains: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllProposals(
      governance: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernanceBalances(
      governance: string,
      accs: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPricesInETH(
      fromTokens: string[],
      oneUnitAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserData(
      governance: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minerRates(
      miner: string,
      instances: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolve(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapState(
      swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    miningData(
      miner: string,
      instances: string[],
      swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketData(
      fromTokens: string[],
      oneUnitAmounts: BigNumberish[],
      swap: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
